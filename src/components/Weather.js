import React, { useEffect, useState } from "react";
import "./weather.css";

export default function Weather() {
  const REACT_APP_API_URL = "https://api.openweathermap.org/data/2.5";
  const REACT_APP_API_KEY = "406e0e52ba8c2b16d6a309e498fa2381";

  const [lat, setLat] = useState(null);
  const [lon, setLon] = useState(null);
  const [weatherData, setWeatherData] = useState(null);
  const [forecastData, setForecastData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const position = await getCurrentPosition();
        setLat(position.coords.latitude);
        setLon(position.coords.longitude);

        const weather = await fetchWeatherData(lat, lon);
        const forecast = await fetchForecastData(lat, lon);

        setWeatherData(weather);
        setForecastData(forecast);
      } catch (error) {
        console.error("Error fetching data: ", error);
      }
    };

    fetchData();
  }, [lat, lon]);

  useEffect(() => {
    const watchId = navigator.geolocation.watchPosition(
      (position) => {
        setLat(position.coords.latitude);
        setLon(position.coords.longitude);
      },
      (error) => {
        console.error("Error getting location: ", error);
      },
    );

    return () => {
      navigator.geolocation.clearWatch(watchId);
    };
  }, []);

  const getWeatherIcon = (weatherCondition) => {
    switch (weatherCondition) {
      case "Clear":
        return (
          <svg
            width="58"
            height="58"
            viewBox="0 0 58 58"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
              d="M27.4006 7.63662V10.4712C27.4006 10.8471 27.5499 11.2076 27.8157 11.4734C28.0815 11.7392 28.442 11.8885 28.8178 11.8885C29.1937 11.8885 29.5542 11.7392 29.82 11.4734C30.0858 11.2076 30.2351 10.8471 30.2351 10.4712V7.63662C30.2351 7.26073 30.0858 6.90024 29.82 6.63444C29.5542 6.36865 29.1937 6.21933 28.8178 6.21933C28.442 6.21933 28.0815 6.36865 27.8157 6.63444C27.5499 6.90024 27.4006 7.26073 27.4006 7.63662ZM28.8178 14.723C26.5625 14.723 24.3996 15.619 22.8048 17.2137C21.2101 18.8085 20.3141 20.9714 20.3141 23.2268C20.3141 25.4821 21.2101 27.645 22.8048 29.2398C24.3996 30.8346 26.5625 31.7305 28.8178 31.7305C31.0732 31.7305 33.2361 30.8346 34.8309 29.2398C36.4256 27.645 37.3216 25.4821 37.3216 23.2268C37.3216 20.9714 36.4256 18.8085 34.8309 17.2137C33.2361 15.619 31.0732 14.723 28.8178 14.723ZM23.1487 23.2268C23.1487 21.7232 23.746 20.2812 24.8092 19.2181C25.8723 18.1549 27.3143 17.5576 28.8178 17.5576C30.3214 17.5576 31.7634 18.1549 32.8265 19.2181C33.8897 20.2812 34.487 21.7232 34.487 23.2268C34.487 24.7303 33.8897 26.1723 32.8265 27.2355C31.7634 28.2986 30.3214 28.8959 28.8178 28.8959C27.3143 28.8959 25.8723 28.2986 24.8092 27.2355C23.746 26.1723 23.1487 24.7303 23.1487 23.2268ZM17.8594 47.1987C21.4446 46.3155 25.1255 45.8804 28.8178 45.9033C33.5487 45.9033 37.4491 46.5525 40.5246 47.3972C43.4726 48.205 45.6694 49.1943 47.1122 49.9709C47.7972 50.3375 48.4598 50.7445 49.0964 51.1898L49.1814 51.2522L49.1928 51.2635C49.4867 51.4981 49.8618 51.6063 50.2355 51.5643C50.6092 51.5223 50.9509 51.3335 51.1855 51.0396C51.42 50.7456 51.5282 50.3706 51.4862 49.9969C51.4442 49.6232 51.2555 49.2814 50.9615 49.0469L50.9559 49.0412L50.9417 49.0327L50.9048 49.0044L50.7716 48.9052C50.0284 48.3815 49.2541 47.9034 48.4529 47.4737C46.1731 46.2712 43.7657 45.328 41.2758 44.6618C37.965 43.7547 33.8095 43.0688 28.8178 43.0688C24.223 43.0688 20.3368 43.6499 17.1649 44.452C14.4667 45.1131 11.856 46.0902 9.38685 47.3631C8.7044 47.7198 8.04028 48.1106 7.39698 48.5338C7.17232 48.6823 6.95207 48.8373 6.73653 48.9987L6.69401 49.0327L6.68267 49.0412L6.677 49.0469C6.38306 49.2814 6.19149 49.6232 6.1495 49.9969C6.1075 50.3706 6.21568 50.7456 6.45024 51.0396C6.68479 51.3335 7.02651 51.5223 7.40021 51.5642C7.77391 51.6062 8.149 51.4981 8.44294 51.2635L8.45995 51.2493L8.55065 51.1813C9.24073 50.7003 9.96023 50.2629 10.7049 49.8717C12.9762 48.7022 15.3777 47.805 17.8594 47.1987ZM27.4006 38.8169V35.9823C27.4006 35.6064 27.5499 35.246 27.8157 34.9802C28.0815 34.7144 28.442 34.5651 28.8178 34.5651C29.1937 34.5651 29.5542 34.7144 29.82 34.9802C30.0858 35.246 30.2351 35.6064 30.2351 35.9823V38.8169C30.2351 39.1928 30.0858 39.5533 29.82 39.8191C29.5542 40.0849 29.1937 40.2342 28.8178 40.2342C28.442 40.2342 28.0815 40.0849 27.8157 39.8191C27.5499 39.5533 27.4006 39.1928 27.4006 38.8169ZM11.8104 24.644C11.8104 24.2682 11.9597 23.9077 12.2255 23.6419C12.4913 23.3761 12.8518 23.2268 13.2277 23.2268H16.0623C16.4382 23.2268 16.7987 23.3761 17.0644 23.6419C17.3302 23.9077 17.4796 24.2682 17.4796 24.644C17.4796 25.0199 17.3302 25.3804 17.0644 25.6462C16.7987 25.912 16.4382 26.0613 16.0623 26.0613H13.2277C12.8518 26.0613 12.4913 25.912 12.2255 25.6462C11.9597 25.3804 11.8104 25.0199 11.8104 24.644ZM41.5734 26.0613H44.408C44.7839 26.0613 45.1444 25.912 45.4102 25.6462C45.676 25.3804 45.8253 25.0199 45.8253 24.644C45.8253 24.2682 45.676 23.9077 45.4102 23.6419C45.1444 23.3761 44.7839 23.2268 44.408 23.2268H41.5734C41.1975 23.2268 40.837 23.3761 40.5712 23.6419C40.3055 23.9077 40.1561 24.2682 40.1561 24.644C40.1561 25.0199 40.3055 25.3804 40.5712 25.6462C40.837 25.912 41.1975 26.0613 41.5734 26.0613ZM19.9003 17.1438C19.7686 17.2758 19.6122 17.3805 19.44 17.4519C19.2679 17.5234 19.0833 17.5602 18.8968 17.5602C18.7104 17.5602 18.5258 17.5234 18.3536 17.4519C18.1815 17.3805 18.0251 17.2758 17.8934 17.1438L15.0588 14.3092C14.9272 14.1774 14.8229 14.021 14.7518 13.8489C14.6806 13.6768 14.6441 13.4924 14.6442 13.3062C14.6443 13.12 14.6811 12.9356 14.7525 12.7636C14.8239 12.5916 14.9285 12.4353 15.0602 12.3037C15.192 12.1722 15.3484 12.0678 15.5205 11.9967C15.6926 11.9255 15.877 11.889 16.0633 11.8891C16.2495 11.8892 16.4339 11.926 16.6059 11.9974C16.7779 12.0688 16.9341 12.1734 17.0657 12.3052L19.9003 15.1397C20.166 15.4055 20.3152 15.7659 20.3152 16.1418C20.3152 16.5176 20.166 16.878 19.9003 17.1438ZM17.8934 32.1443C18.0252 32.0126 18.1816 31.908 18.3538 31.8367C18.526 31.7654 18.7105 31.7287 18.8968 31.7287C19.0832 31.7287 19.2677 31.7654 19.4399 31.8367C19.6121 31.908 19.7685 32.0126 19.9003 32.1443C20.0321 32.2761 20.1366 32.4325 20.2079 32.6047C20.2792 32.7769 20.3159 32.9614 20.3159 33.1478C20.3159 33.3341 20.2792 33.5187 20.2079 33.6908C20.1366 33.863 20.0321 34.0194 19.9003 34.1512L17.0657 36.9858C16.8 37.2519 16.4394 37.4016 16.0633 37.4018C15.6872 37.4021 15.3264 37.2529 15.0602 36.9872C14.7941 36.7214 14.6445 36.3609 14.6442 35.9848C14.6439 35.6087 14.7931 35.2479 15.0588 34.9817L17.8934 32.1472V32.1443ZM37.7354 17.1438C37.8671 17.2758 38.0235 17.3805 38.1957 17.4519C38.3678 17.5234 38.5524 17.5602 38.7388 17.5602C38.9253 17.5602 39.1099 17.5234 39.282 17.4519C39.4542 17.3805 39.6106 17.2758 39.7423 17.1438L42.5769 14.3092C42.843 14.0431 42.9925 13.6821 42.9925 13.3058C42.9925 12.9294 42.843 12.5684 42.5769 12.3023C42.3107 12.0362 41.9498 11.8867 41.5734 11.8867C41.1971 11.8867 40.8361 12.0362 40.57 12.3023L37.7354 15.1369C37.6034 15.2685 37.4987 15.4249 37.4273 15.5971C37.3558 15.7693 37.319 15.9539 37.319 16.1403C37.319 16.3268 37.3558 16.5113 37.4273 16.6835C37.4987 16.8557 37.6034 17.0121 37.7354 17.1438ZM39.7423 32.1472C39.4765 31.881 39.1159 31.7314 38.7399 31.7311C38.3638 31.7308 38.003 31.88 37.7368 32.1457C37.4707 32.4115 37.321 32.7721 37.3208 33.1482C37.3205 33.5243 37.4697 33.8851 37.7354 34.1512L40.57 36.9858C40.8357 37.2519 41.1963 37.4016 41.5724 37.4018C41.9485 37.4021 42.3093 37.2529 42.5754 36.9872C42.8416 36.7214 42.9912 36.3609 42.9915 35.9848C42.9918 35.6087 42.8426 35.2479 42.5769 34.9817L39.7423 32.1472Z"
              fill="white"
            />
          </svg>
        );
      case "Clouds":
        return (
          <svg
            width="46"
            height="45"
            viewBox="0 0 46 45"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
              d="M12.2358 35.625C11.5796 35.625 11.0252 35.3981 10.5727 34.9444C10.119 34.4919 9.89209 33.9375 9.89209 33.2812C9.89209 32.625 10.119 32.0706 10.5727 31.6181C11.0252 31.1644 11.5796 30.9375 12.2358 30.9375C12.8921 30.9375 13.4471 31.1644 13.9008 31.6181C14.3533 32.0706 14.5796 32.625 14.5796 33.2812C14.5796 33.9375 14.3533 34.4919 13.9008 34.9444C13.4471 35.3981 12.8921 35.625 12.2358 35.625ZM17.8608 41.25C17.2046 41.25 16.6502 41.0231 16.1977 40.5694C15.744 40.1169 15.5171 39.5625 15.5171 38.9062C15.5171 38.25 15.744 37.6956 16.1977 37.2431C16.6502 36.7894 17.2046 36.5625 17.8608 36.5625C18.5171 36.5625 19.0715 36.7894 19.524 37.2431C19.9777 37.6956 20.2046 38.25 20.2046 38.9062C20.2046 39.5625 19.9777 40.1169 19.524 40.5694C19.0715 41.0231 18.5171 41.25 17.8608 41.25ZM23.4858 35.625C22.8296 35.625 22.2752 35.3981 21.8227 34.9444C21.369 34.4919 21.1421 33.9375 21.1421 33.2812C21.1421 32.625 21.369 32.0706 21.8227 31.6181C22.2752 31.1644 22.8296 30.9375 23.4858 30.9375C24.1421 30.9375 24.6965 31.1644 25.149 31.6181C25.6027 32.0706 25.8296 32.625 25.8296 33.2812C25.8296 33.9375 25.6027 34.4919 25.149 34.9444C24.6965 35.3981 24.1421 35.625 23.4858 35.625ZM34.7358 35.625C34.0796 35.625 33.5252 35.3981 33.0727 34.9444C32.619 34.4919 32.3921 33.9375 32.3921 33.2812C32.3921 32.625 32.619 32.0706 33.0727 31.6181C33.5252 31.1644 34.0796 30.9375 34.7358 30.9375C35.3921 30.9375 35.9471 31.1644 36.4008 31.6181C36.8533 32.0706 37.0796 32.625 37.0796 33.2812C37.0796 33.9375 36.8533 34.4919 36.4008 34.9444C35.9471 35.3981 35.3921 35.625 34.7358 35.625ZM29.1108 41.25C28.4546 41.25 27.9002 41.0231 27.4477 40.5694C26.994 40.1169 26.7671 39.5625 26.7671 38.9062C26.7671 38.25 26.994 37.6956 27.4477 37.2431C27.9002 36.7894 28.4546 36.5625 29.1108 36.5625C29.7671 36.5625 30.3221 36.7894 30.7758 37.2431C31.2283 37.6956 31.4546 38.25 31.4546 38.9062C31.4546 39.5625 31.2283 40.1169 30.7758 40.5694C30.3221 41.0231 29.7671 41.25 29.1108 41.25ZM14.1108 28.125C11.2671 28.125 8.83772 27.1169 6.82272 25.1006C4.80646 23.0856 3.79834 20.6562 3.79834 17.8125C3.79834 15.2188 4.65771 12.9531 6.37647 11.0156C8.09522 9.07812 10.2202 7.9375 12.7515 7.59375C13.7515 5.8125 15.119 4.41375 16.854 3.3975C18.5877 2.3825 20.4858 1.875 22.5483 1.875C25.3608 1.875 27.8058 2.77375 29.8833 4.57125C31.9621 6.3675 33.2202 8.60938 33.6577 11.2969C35.814 11.4844 37.6265 12.375 39.0952 13.9688C40.564 15.5625 41.2983 17.4688 41.2983 19.6875C41.2983 22.0312 40.4783 24.0238 38.8383 25.665C37.1971 27.305 35.2046 28.125 32.8608 28.125H14.1108ZM14.1108 24.375H32.8608C34.1733 24.375 35.2827 23.9219 36.189 23.0156C37.0952 22.1094 37.5483 21 37.5483 19.6875C37.5483 18.375 37.0952 17.2656 36.189 16.3594C35.2827 15.4531 34.1733 15 32.8608 15H30.0483V13.125C30.0483 11.0625 29.314 9.29688 27.8452 7.82813C26.3765 6.35938 24.6108 5.625 22.5483 5.625C21.0483 5.625 19.6808 6.03125 18.4458 6.84375C17.2121 7.65625 16.2827 8.75 15.6577 10.125L15.189 11.25H14.0171C12.2358 11.3125 10.7127 11.9762 9.44772 13.2413C8.18147 14.5075 7.54834 16.0312 7.54834 17.8125C7.54834 19.625 8.18897 21.1719 9.47022 22.4531C10.7515 23.7344 12.2983 24.375 14.1108 24.375Z"
              fill="white"
            />
          </svg>
        );
      case "Rain":
        return (
          <svg
            width="45"
            height="44"
            viewBox="0 0 45 44"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_0_32)">
              <path
                d="M33.7878 37.125C34.9269 37.125 35.8503 36.2016 35.8503 35.0625C35.8503 33.9234 34.9269 33 33.7878 33C32.6488 33 31.7253 33.9234 31.7253 35.0625C31.7253 36.2016 32.6488 37.125 33.7878 37.125Z"
                fill="white"
              />
              <path
                d="M29.6628 42.625C30.8019 42.625 31.7253 41.7016 31.7253 40.5625C31.7253 39.4234 30.8019 38.5 29.6628 38.5C28.5238 38.5 27.6003 39.4234 27.6003 40.5625C27.6003 41.7016 28.5238 42.625 29.6628 42.625Z"
                fill="white"
              />
              <path
                d="M21.9188 41.932L19.5318 40.568L23.8548 33H15.6062L22.2818 21.318L24.6688 22.682L20.3445 30.25H28.5958L21.9188 41.932Z"
                fill="white"
              />
              <path
                d="M12.4753 44C12.2411 43.9999 12.0107 43.9399 11.8061 43.8257C11.6015 43.7116 11.4295 43.547 11.3063 43.3477C11.1832 43.1484 11.113 42.9209 11.1025 42.6869C11.0919 42.4528 11.1414 42.22 11.2461 42.0104L13.9961 36.5104C14.0733 36.3432 14.1833 36.1933 14.3196 36.0694C14.4559 35.9456 14.6157 35.8504 14.7894 35.7894C14.9632 35.7285 15.1474 35.7031 15.3312 35.7147C15.515 35.7264 15.6946 35.7748 15.8593 35.8572C16.024 35.9395 16.1704 36.0541 16.29 36.1941C16.4096 36.3342 16.4998 36.4968 16.5553 36.6724C16.6109 36.848 16.6306 37.0329 16.6133 37.2162C16.5959 37.3996 16.542 37.5775 16.4546 37.7396L13.7046 43.2396C13.5907 43.4682 13.4154 43.6604 13.1982 43.7948C12.981 43.9291 12.7307 44.0002 12.4753 44ZM34.2003 12.562C33.6144 9.78696 32.0925 7.29763 29.8895 5.51124C27.6866 3.72485 24.9366 2.74995 22.1003 2.74995C19.2641 2.74995 16.5141 3.72485 14.3111 5.51124C12.1082 7.29763 10.5862 9.78696 10.0003 12.562C7.95562 12.9778 6.12114 14.0967 4.81549 15.7243C3.50984 17.3519 2.81551 19.3854 2.85309 21.4716C2.89067 23.5578 3.65779 25.565 5.02121 27.1445C6.38463 28.724 8.25822 29.7761 10.3166 30.118L8.49609 33.7604C8.40869 33.9225 8.35473 34.1004 8.33743 34.2838C8.32012 34.4671 8.33981 34.652 8.39534 34.8276C8.45086 35.0032 8.54109 35.1658 8.66066 35.3059C8.78023 35.4459 8.92672 35.5605 9.09142 35.6428C9.25612 35.7252 9.43569 35.7736 9.61947 35.7853C9.80324 35.7969 9.98748 35.7715 10.1613 35.7106C10.335 35.6497 10.4948 35.5544 10.6311 35.4306C10.7674 35.3068 10.8774 35.1568 10.9546 34.9896L13.7046 29.4896C13.8675 29.1637 13.8944 28.7865 13.7795 28.4408C13.6645 28.0951 13.417 27.8091 13.0913 27.6458C12.8993 27.5536 12.6882 27.5084 12.4753 27.5138V27.5H11.7878C10.1868 27.5052 8.64624 26.8892 7.49015 25.7817C6.33406 24.6741 5.65263 23.1613 5.58922 21.5616C5.5258 19.9618 6.08535 18.3998 7.15015 17.2042C8.21494 16.0087 9.70196 15.2727 11.2983 15.1511L12.4203 15.0631L12.5565 13.9466C12.8435 11.6174 13.9723 9.47352 15.7303 7.91883C17.4883 6.36415 19.7542 5.50598 22.101 5.50598C24.4479 5.50598 26.7137 6.36415 28.4717 7.91883C30.2297 9.47352 31.3586 11.6174 31.6456 13.9466L31.7817 15.0631L32.9023 15.1511C34.4987 15.2727 35.9857 16.0087 37.0505 17.2042C38.1153 18.3998 38.6749 19.9618 38.6115 21.5616C38.5481 23.1613 37.8666 24.6741 36.7105 25.7817C35.5544 26.8892 34.0138 27.5052 32.4128 27.5H31.7253V30.25H32.4128C34.6282 30.2523 36.7655 29.4314 38.4096 27.9466C40.0538 26.4618 41.0876 24.419 41.3103 22.2148C41.5331 20.0107 40.9289 17.8024 39.615 16.0186C38.3012 14.2349 36.3714 13.003 34.2003 12.562Z"
                fill="white"
              />
            </g>
            <defs>
              <clipPath id="clip0_0_32">
                <rect
                  width="44"
                  height="44"
                  fill="white"
                  transform="translate(0.100342)"
                />
              </clipPath>
            </defs>
          </svg>
        );
      case "Wind":
        return (
          <svg
            width="48"
            height="48"
            viewBox="0 0 48 48"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
              d="M8 20C7.46957 20 6.96086 19.7893 6.58579 19.4142C6.21071 19.0391 6 18.5304 6 18C6 17.4696 6.21071 16.9609 6.58579 16.5858C6.96086 16.2107 7.46957 16 8 16H24C25.0609 16 26.0783 15.5786 26.8284 14.8284C27.5786 14.0783 28 13.0609 28 12C28 10.9391 27.5786 9.92172 26.8284 9.17157C26.0783 8.42143 25.0609 8 24 8C22.9 8 21.9 8.44 21.18 9.18C20.998 9.37424 20.7781 9.52908 20.5338 9.63493C20.2896 9.74078 20.0262 9.79539 19.76 9.79539C19.4938 9.79539 19.2304 9.74078 18.9862 9.63493C18.7419 9.52908 18.522 9.37424 18.34 9.18C17.56 8.4 17.56 7.12 18.34 6.34C19.8 4.9 21.8 4 24 4C26.1217 4 28.1566 4.84285 29.6569 6.34315C31.1571 7.84344 32 9.87827 32 12C32 14.1217 31.1571 16.1566 29.6569 17.6569C28.1566 19.1571 26.1217 20 24 20H8ZM38 24C38.5304 24 39.0391 23.7893 39.4142 23.4142C39.7893 23.0391 40 22.5304 40 22C40 21.4696 39.7893 20.9609 39.4142 20.5858C39.0391 20.2107 38.5304 20 38 20C37.44 20 36.94 20.22 36.58 20.58C36.395 20.7654 36.1752 20.9125 35.9333 21.0129C35.6913 21.1132 35.4319 21.1649 35.17 21.1649C34.9081 21.1649 34.6487 21.1132 34.4067 21.0129C34.1648 20.9125 33.945 20.7654 33.76 20.58C33 19.8 33 18.54 33.76 17.76C34.84 16.68 36.34 16 38 16C39.5913 16 41.1174 16.6321 42.2426 17.7574C43.3679 18.8826 44 20.4087 44 22C44 23.5913 43.3679 25.1174 42.2426 26.2426C41.1174 27.3679 39.5913 28 38 28H10C9.46957 28 8.96086 27.7893 8.58579 27.4142C8.21071 27.0391 8 26.5304 8 26C8 25.4696 8.21071 24.9609 8.58579 24.5858C8.96086 24.2107 9.46957 24 10 24H38ZM36 36H8C7.46957 36 6.96086 35.7893 6.58579 35.4142C6.21071 35.0391 6 34.5304 6 34C6 33.4696 6.21071 32.9609 6.58579 32.5858C6.96086 32.2107 7.46957 32 8 32H36C37.5913 32 39.1174 32.6321 40.2426 33.7574C41.3679 34.8826 42 36.4087 42 38C42 39.5913 41.3679 41.1174 40.2426 42.2426C39.1174 43.3679 37.5913 44 36 44C34.34 44 32.84 43.32 31.76 42.24C31 41.46 31 40.2 31.76 39.42C31.945 39.2346 32.1648 39.0875 32.4067 38.9871C32.6487 38.8868 32.9081 38.8351 33.17 38.8351C33.4319 38.8351 33.6913 38.8868 33.9333 38.9871C34.1752 39.0875 34.395 39.2346 34.58 39.42C34.94 39.78 35.44 40 36 40C36.5304 40 37.0391 39.7893 37.4142 39.4142C37.7893 39.0391 38 38.5304 38 38C38 37.4696 37.7893 36.9609 37.4142 36.5858C37.0391 36.2107 36.5304 36 36 36Z"
              fill="white"
            />
          </svg>
        );
    }
  };

  const getCurrentPosition = () => {
    return new Promise((resolve, reject) => {
      navigator.geolocation.getCurrentPosition(resolve, reject);
    });
  };
  const fetchWeatherData = async (latitude, longitude) => {
    try {
      const response = await fetch(
        `${REACT_APP_API_URL}/weather/?lat=${latitude}&lon=${longitude}&units=metric&APPID=${REACT_APP_API_KEY}`,
      );
      if (!response.ok) {
        throw new Error("Weather data request failed");
      }
      const result = await response.json();
      return result;
    } catch (error) {
      console.error("Error fetching weather data: ", error);
      throw error;
    }
  };

  const fetchForecastData = async (latitude, longitude) => {
    try {
      const response = await fetch(
        `${REACT_APP_API_URL}/forecast/?lat=${latitude}&lon=${longitude}&units=metric&APPID=${REACT_APP_API_KEY}`,
      );
      if (!response.ok) {
        throw new Error("Forecast data request failed");
      }
      const result = await response.json();
      return result;
    } catch (error) {
      console.error("Error fetching forecast data: ", error);
      throw error;
    }
  };

  const search = async () => {
    const element = document.querySelector(".cityInput");
    if (!element) return;

    const cityName = element.value;
    if (!cityName) return;

    try {
      const response = await fetch(
        `${REACT_APP_API_URL}/weather?q=${cityName}&units=metric&APPID=${REACT_APP_API_KEY}`,
      );
      if (!response.ok) {
        throw new Error("City not found");
      }
      const result = await response.json();
      setWeatherData(result);
    } catch (error) {
      console.error("Error fetching weather data for city: ", error);
      // Handle the error (e.g., display a message to the user)
    }
  };

  return (
    <>
      <div class="main">
        <div class="con">
          <div class="location">
            <svg
              width="30"
              height="30"
              viewBox="0 0 30 30"
              fill="none"
              xmlns="http://www.w3.org/2000/svg">
              <path
                d="M16.2188 27.4375V24.9375C17.0938 24.8125 17.9425 24.5729 18.765 24.2188C19.5883 23.8646 20.3646 23.4167 21.0938 22.875L22.9063 24.6875C21.9271 25.4583 20.875 26.0783 19.75 26.5475C18.625 27.0158 17.4479 27.3125 16.2188 27.4375ZM24.6562 22.875L22.9063 21.125C23.4479 20.4375 23.8854 19.6821 24.2188 18.8587C24.5521 18.0362 24.7812 17.1667 24.9062 16.25H27.4688C27.3021 17.5417 26.9846 18.7446 26.5163 19.8587C26.0471 20.9737 25.4271 21.9792 24.6562 22.875ZM24.9062 13.75C24.7812 12.8125 24.5521 11.9321 24.2188 11.1087C23.8854 10.2863 23.4479 9.54167 22.9063 8.875L24.6562 7.125C25.4479 8.04167 26.0888 9.0625 26.5788 10.1875C27.0679 11.3125 27.3646 12.5 27.4688 13.75H24.9062ZM13.7188 27.4375C10.5313 27.0625 7.87 25.6929 5.735 23.3288C3.59917 20.9638 2.53125 18.1875 2.53125 15C2.53125 11.7708 3.59917 8.97917 5.735 6.625C7.87 4.27083 10.5313 2.91667 13.7188 2.5625V5.0625C11.2188 5.41667 9.14583 6.53125 7.5 8.40625C5.85417 10.2812 5.03125 12.4792 5.03125 15C5.03125 17.5 5.85417 19.6875 7.5 21.5625C9.14583 23.4375 11.2188 24.5625 13.7188 24.9375V27.4375ZM21.1562 7.125C20.4062 6.5625 19.6146 6.10417 18.7812 5.75C17.9479 5.39583 17.0938 5.16667 16.2188 5.0625V2.5625C17.4479 2.66667 18.625 2.95292 19.75 3.42125C20.875 3.89042 21.9271 4.52083 22.9063 5.3125L21.1562 7.125ZM15 21.25C13.3125 19.8125 12.0575 18.4842 11.235 17.265C10.4117 16.0467 10 14.9167 10 13.875C10 12.3125 10.5054 11.0679 11.5163 10.1412C12.5262 9.21375 13.6875 8.75 15 8.75C16.3125 8.75 17.4742 9.21375 18.485 10.1412C19.495 11.0679 20 12.3125 20 13.875C20 14.9167 19.5883 16.0467 18.765 17.265C17.9425 18.4842 16.6875 19.8125 15 21.25ZM15 15C15.375 15 15.6929 14.87 15.9537 14.61C16.2137 14.3492 16.3437 14.0312 16.3437 13.6562C16.3437 13.3021 16.2137 12.9896 15.9537 12.7188C15.6929 12.4479 15.375 12.3125 15 12.3125C14.625 12.3125 14.3075 12.4479 14.0475 12.7188C13.7867 12.9896 13.6562 13.3021 13.6562 13.6562C13.6562 14.0312 13.7867 14.3492 14.0475 14.61C14.3075 14.87 14.625 15 15 15Z"
                fill="#1D2540"
              />
            </svg>

            <p>{weatherData ? weatherData.name : "Loading.."}</p>
          </div>
          <div class="subloction">27°10'36'' N & 78°0'29'' E</div>
        </div>
        <div class="search-container">
          <div class="background"></div>
          <input
            type="text"
            class="text-container cityInput"
            placeholder="Search your city here..."
            id="searchInput"
          />
          <div class="icon-container" onclick={search()}>
            <div class="icon">
              <button type="submit">
                <svg
                  width="29"
                  height="29"
                  viewBox="0 0 29 29"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M18.7929 16.6517H17.86L17.5294 16.3329C18.7266 14.9442 19.3846 13.1714 19.3833 11.3379C19.3833 9.81987 18.9332 8.33591 18.0898 7.07369C17.2464 5.81148 16.0476 4.8277 14.6451 4.24677C13.2426 3.66583 11.6994 3.51383 10.2105 3.80999C8.72161 4.10615 7.35398 4.83716 6.28055 5.91059C5.20713 6.98401 4.47611 8.35164 4.17996 9.84053C3.8838 11.3294 4.0358 12.8727 4.61673 14.2752C5.19766 15.6777 6.18144 16.8764 7.44366 17.7198C8.70587 18.5632 10.1898 19.0133 11.7079 19.0133C13.609 19.0133 15.3567 18.3167 16.7028 17.1594L17.0216 17.4901V18.4229L22.9258 24.3153L24.6852 22.5558L18.7929 16.6517ZM11.7079 16.6517C8.76762 16.6517 6.39414 14.2782 6.39414 11.3379C6.39414 8.39765 8.76762 6.02418 11.7079 6.02418C14.6482 6.02418 17.0216 8.39765 17.0216 11.3379C17.0216 14.2782 14.6482 16.6517 11.7079 16.6517Z"
                    fill="#444444"
                  />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="styled-line"></div>

      <div class="date">
        <div class="cont">
          Select Date:
          <div class="datecontainer">
            <div class="datebackground-container"></div>
            <div class="dateicon-container">
              <div class="dateicon">
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg">
                  <g clip-path="url(#clip0_0_74)">
                    <path
                      d="M22.1674 2.31985L16.3367 2.31987V0.868546C16.3367 0.466209 16.0108 0.140335 15.6084 0.140335C15.2061 0.140335 14.8802 0.466209 14.8802 0.868546V2.31951H9.05454V0.868546C9.05454 0.466209 8.72867 0.140335 8.32633 0.140335C7.92399 0.140335 7.59812 0.466209 7.59812 0.868546V2.31951H1.77753C0.973219 2.31951 0.321106 2.97162 0.321106 3.77593V21.9812C0.321106 22.7855 0.973219 23.4376 1.77753 23.4376H22.1674C22.9717 23.4376 23.6239 22.7855 23.6239 21.9812V3.77593C23.6239 2.97196 22.9717 2.31985 22.1674 2.31985ZM22.1674 21.9812H1.77753V3.77593H7.59812V4.5096C7.59812 4.91191 7.92399 5.23781 8.32633 5.23781C8.72867 5.23781 9.05454 4.91191 9.05454 4.5096V3.77629H14.8802V4.50996C14.8802 4.9123 15.2061 5.23818 15.6084 5.23818C16.0108 5.23818 16.3367 4.9123 16.3367 4.50996V3.77629H22.1674V21.9812ZM17.07 11.7866H18.5264C18.9284 11.7866 19.2546 11.4604 19.2546 11.0584V9.60196C19.2546 9.19998 18.9284 8.87375 18.5264 8.87375H17.07C16.668 8.87375 16.3417 9.19998 16.3417 9.60196V11.0584C16.3417 11.4604 16.668 11.7866 17.07 11.7866ZM17.07 17.6119H18.5264C18.9284 17.6119 19.2546 17.286 19.2546 16.8837V15.4273C19.2546 15.0253 18.9284 14.6991 18.5264 14.6991H17.07C16.668 14.6991 16.3417 15.0253 16.3417 15.4273V16.8837C16.3417 17.2864 16.668 17.6119 17.07 17.6119ZM12.7007 14.6991H11.2443C10.8423 14.6991 10.5161 15.0253 10.5161 15.4273V16.8837C10.5161 17.286 10.8423 17.6119 11.2443 17.6119H12.7007C13.1027 17.6119 13.4289 17.286 13.4289 16.8837V15.4273C13.4289 15.0257 13.1027 14.6991 12.7007 14.6991ZM12.7007 8.87375H11.2443C10.8423 8.87375 10.5161 9.19998 10.5161 9.60196V11.0584C10.5161 11.4604 10.8423 11.7866 11.2443 11.7866H12.7007C13.1027 11.7866 13.4289 11.4604 13.4289 11.0584V9.60196C13.4289 9.19962 13.1027 8.87375 12.7007 8.87375ZM6.875 8.87375H5.41858C5.01661 8.87375 4.69037 9.19998 4.69037 9.60196V11.0584C4.69037 11.4604 5.01661 11.7866 5.41858 11.7866H6.875C7.27698 11.7866 7.60322 11.4604 7.60322 11.0584V9.60196C7.60322 9.19962 7.27698 8.87375 6.875 8.87375ZM6.875 14.6991H5.41858C5.01661 14.6991 4.69037 15.0253 4.69037 15.4273V16.8837C4.69037 17.286 5.01661 17.6119 5.41858 17.6119H6.875C7.27698 17.6119 7.60322 17.286 7.60322 16.8837V15.4273C7.60322 15.0257 7.27698 14.6991 6.875 14.6991Z"
                      fill="#444444"
                    />
                  </g>
                  <defs>
                    <clipPath id="clip0_0_74">
                      <rect
                        width="23.3028"
                        height="23.3028"
                        fill="white"
                        transform="translate(0.321106 0.137619)"
                      />
                    </clipPath>
                  </defs>
                </svg>
              </div>
            </div>

            <div class="datetext-container">
              {weatherData
                ? new Date(weatherData.dt * 1000).toDateString()
                : "Loading..."}
            </div>
          </div>
          <div class="info-container">
            <div class="info-item">High Temperature</div>
            <div class="info-item">Low Temperature</div>
            <div class="info-item">Humidity</div>
            <div class="info-item">Sunrise Time</div>
            <div class="info-item">Sunset Time</div>
          </div>
        </div>
        <div>
          <div>
            <div
              className="col"
              style={{
                display: "flex",
                flexDirection: "row", // Align items horizontally
                gap: "16px", // Adjust the gap between cards
              }}>
              <div>
                <div className="row">
                  {forecastData &&
                    forecastData.list &&
                    Array.from(
                      new Set(
                        forecastData.list.map((entry) =>
                          new Date(entry.dt * 1000).toDateString(),
                        ),
                      ),
                    ).map((uniqueDate, index) => (
                      <div
                        key={index}
                        className="weather-card"
                        style={{
                          height: "40px",
                          alignItems: "center",
                          marginLeft: "5px",
                        }}>
                        <div className="carddate1" style={{ color: "black" }}>
                          {uniqueDate}
                        </div>
                      </div>
                    ))}
                </div>
                <div className="row">
                  {forecastData &&
                    forecastData.list &&
                    forecastData.list
                      .slice(0, 5)
                      .map((forecastEntry, index) => (
                        <div key={index} className="weather-card">
                          <div className="cardbackground">
                            <div className="cardicon-container">
                              <div className="cardicon">
                                <div className="cardinner-icon">
                                  {getWeatherIcon(
                                    forecastEntry.weather[0].main,
                                  )}
                                </div>
                              </div>
                            </div>
                            <div className="cardseparator"></div>
                            <div className="cardtemperature-info">
                              <div className="cardtemperature">
                                {`${Math.round(forecastEntry.main.temp_max)}°C`}
                              </div>
                              <div className="cardtemperature">
                                {`${Math.round(forecastEntry.main.temp_min)}°C`}
                              </div>
                              <div className="cardhumidity">
                                {`${forecastEntry.main.humidity}%`}
                              </div>
                              <div className="cardtime">
                                {forecastEntry.sys &&
                                forecastEntry.sys.sunrise ? (
                                  <>
                                    {console.log(
                                      "Sunrise time:",
                                      new Date(
                                        forecastEntry.sys.sunrise * 1000,
                                      ),
                                    )}
                                    {new Date(
                                      forecastEntry.sys.sunrise * 1000,
                                    ).toLocaleTimeString([], {
                                      hour: "numeric",
                                      minute: "2-digit",
                                      hour12: true,
                                    })}
                                  </>
                                ) : (
                                  "Sunrise time not available"
                                )}
                              </div>
                              <div className="cardtime">
                                {forecastEntry.sys &&
                                forecastEntry.sys.sunset ? (
                                  <>
                                    {console.log(
                                      "Sunset time:",
                                      new Date(forecastEntry.sys.sunset * 1000),
                                    )}
                                    {new Date(
                                      forecastEntry.sys.sunset * 1000,
                                    ).toLocaleTimeString([], {
                                      hour: "numeric",
                                      minute: "2-digit",
                                      hour12: true,
                                    })}
                                  </>
                                ) : (
                                  "Sunset time not available"
                                )}
                              </div>
                            </div>
                            <div className="cardweather-status">
                              {`${forecastEntry.weather[0].main}`}
                            </div>
                          </div>
                        </div>
                      ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
